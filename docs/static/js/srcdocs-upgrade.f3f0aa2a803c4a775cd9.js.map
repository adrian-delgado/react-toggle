{"version":3,"sources":["webpack:///./srcdocs/upgrade.mdx"],"names":["MDXContent","props","layout","React","Component","this","components","name","parentName"],"mappings":"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","file":"static/js/srcdocs-upgrade.66adb4d4.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"upgrade-guide\"}}>{`Upgrade Guide`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"upgrade-to-20-from-1x\"}}>{`Upgrade to 2.0 from 1.x`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This version is not fully compatible with the previous 1.x versions. Anyway, you may update your code easly`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"labels\"}}>{`Labels`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`First of all, we've removed the props for the labels. You can upgrade your code by following`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`// previous v1.x\n<Toggle label=\"Left label\" />\n\n// Left label from v2.x\n<label htmlFor=\"toggle-a\">\n  Click me\n  <Toggle name=\"toggle-a\" />\n</label>\n\n// Right label from v2.x\n<label htmlFor=\"toggle-b\">\n  <Toggle name=\"toggle-b\" />\n  Click me\n</label>\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"events\"}}>{`Events`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The previous `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onChange`}</MDXTag>{` event become `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onToggle`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`// previous v1.x\n<Toggle name=\"toggle-c\" onChange={(checked, evt) => console.log(e.target.checked)} />\n\n// from v2.x\n<Toggle name=\"toggle-c\" onToggle={e => console.log(e.target.checked)} />\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The new `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onToggle`}</MDXTag>{` event, has got only one param, I mean, the standard `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`event`}</MDXTag>{` object.\nIn fact, you will be able to get all information about the toggle by using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`e.target`}</MDXTag>{` as shown above.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In addition, you may use the new `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onRight`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onLeft`}</MDXTag>{` events. They are trigged when the toggle is switched from the left to the right and vice versa. In short, when it's `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`on`}</MDXTag>{` (usually) and `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`off`}</MDXTag>{` (usually).`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`// from left to the right \"on\"\n<Toggle name=\"toggle-c\" onRight={e => console.log(e.target.name)} />\n\n// from right to the left \"off\"\n<Toggle name=\"toggle-c\" onLeft={e => console.log(e.target.name)} />\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"mode-prop\"}}>{`Mode prop`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Also the prop `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mode`}</MDXTag>{` is no longer available. This because in the previous version the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mode=\"switch\"`}</MDXTag>{` was keeping the \"on\" and \"off\" appearance colours the same. Now, you can do the same by using the new props. See the  `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"/theming\"}}>{`Theming`}</MDXTag>{` section for more details.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"theme-prop\"}}>{`Theme prop`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We have also removed the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`theme`}</MDXTag>{` prop. Now, you'll be able to create any toggle theme by using the new props for the appearance and the theme provider. See the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"/theming\"}}>{`Theming`}</MDXTag>{` section for more details.`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}