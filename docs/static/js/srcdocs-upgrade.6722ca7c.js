(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"./srcdocs/upgrade.mdx":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return b});var o=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),a=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),l={},r="wrapper";function b(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)(r,Object.assign({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"upgrade-guide"},"Upgrade Guide"),Object(a.b)("h2",{id:"upgrade-to-20-from-1x"},"Upgrade to 2.0 from 1.x"),Object(a.b)("p",null,"This version is not fully compatible with the previous 1.x versions. Anyway, you may update your code easly"),Object(a.b)("h2",{id:"labels"},"Labels"),Object(a.b)("p",null,"First of all, we've removed the props for the labels. You can upgrade your code by following"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// previous v1.x\n<Toggle label="Left label" />\n\n// Left label from v2.x\n<label htmlFor="toggle-a">\n  Click me\n  <Toggle name="toggle-a" />\n</label>\n\n// Right label from v2.x\n<label htmlFor="toggle-b">\n  <Toggle name="toggle-b" />\n  Click me\n</label>\n')),Object(a.b)("h2",{id:"events"},"Events"),Object(a.b)("p",null,"The previous ",Object(a.b)("inlineCode",{parentName:"p"},"onChange")," event become ",Object(a.b)("inlineCode",{parentName:"p"},"onToggle")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// previous v1.x\n<Toggle name="toggle-c" onChange={(checked, evt) => console.log(e.target.checked)} />\n\n// from v2.x\n<Toggle name="toggle-c" onToggle={e => console.log(e.target.checked)} />\n')),Object(a.b)("p",null,"The new ",Object(a.b)("inlineCode",{parentName:"p"},"onToggle")," event, has got only one param, I mean, the standard ",Object(a.b)("inlineCode",{parentName:"p"},"event")," object.\nIn fact, you will be able to get all information about the toggle by using ",Object(a.b)("inlineCode",{parentName:"p"},"e.target")," as shown above."),Object(a.b)("p",null,"In addition, you may use the new ",Object(a.b)("inlineCode",{parentName:"p"},"onRight")," and ",Object(a.b)("inlineCode",{parentName:"p"},"onLeft")," events. They are trigged when the toggle is switched from the left to the right and vice versa. In short, when it's ",Object(a.b)("strong",{parentName:"p"},"on")," (usually) and ",Object(a.b)("strong",{parentName:"p"},"off")," (usually)."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'// from left to the right "on"\n<Toggle name="toggle-c" onRight={e => console.log(e.target.name)} />\n\n// from right to the left "off"\n<Toggle name="toggle-c" onLeft={e => console.log(e.target.name)} />\n')),Object(a.b)("h2",{id:"mode-prop"},"Mode prop"),Object(a.b)("p",null,"Also the prop ",Object(a.b)("inlineCode",{parentName:"p"},"mode")," is no longer available. This because in the previous version the ",Object(a.b)("inlineCode",{parentName:"p"},'mode="switch"'),' was keeping the "on" and "off" appearance colours the same. Now, you can do the same by using the new props. See the  ',Object(a.b)("a",Object.assign({parentName:"p"},{href:"/theming"}),"Theming")," section for more details."),Object(a.b)("h2",{id:"theme-prop"},"Theme prop"),Object(a.b)("p",null,"We have also removed the ",Object(a.b)("inlineCode",{parentName:"p"},"theme")," prop. Now, you'll be able to create any toggle theme by using the new props for the appearance and the theme provider. See the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"/theming"}),"Theming")," section for more details."))}b&&b===Object(b)&&Object.isExtensible(b)&&Object.defineProperty(b,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"srcdocs/upgrade.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=srcdocs-upgrade.52ef57a427be75173c36.js.map