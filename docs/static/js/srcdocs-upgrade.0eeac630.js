(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{"./srcdocs/upgrade.mdx":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return i});var a=t("./node_modules/react/index.js"),o=t.n(a),r=t("./node_modules/@mdx-js/tag/dist/index.js");function m(e){return(m="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}function l(e,n){for(var t=0;t<n.length;t++){var a=n[t];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function c(e,n){return!n||"object"!==m(n)&&"function"!==typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function g(e,n){return(g=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var i=function(e){function n(e){var t;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(t=c(this,s(n).call(this,e))).layout=null,t}var t,a,m;return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&g(e,n)}(n,o.a.Component),t=n,(a=[{key:"render",value:function(){var e=this.props,n=e.components;p(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"upgrade-guide"}},"Upgrade Guide"),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"upgrade-to-20-from-1x"}},"Upgrade to 2.0 from 1.x"),o.a.createElement(r.MDXTag,{name:"p",components:n},"This version is not fully compatible with the previous 1.x versions. Anyway, you may update your code easly"),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"labels"}},"Labels"),o.a.createElement(r.MDXTag,{name:"p",components:n},"First of all, we've removed the embeded labels. In the previous version you had"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx"}},'<Toggle label="Left label" />\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"Now you may use the following for the left label"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx"}},'<label htmlFor="toggle-a">\n  Click me\n  <Toggle name="toggle-a" />\n</label>\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"And the following code for the right label"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx"}},'<label htmlFor="toggle-b">\n  <Toggle name="toggle-b" />\n  Click me\n</label>\n')),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"events"}},"Events"),o.a.createElement(r.MDXTag,{name:"p",components:n},"The previous ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"onChange")," event become ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"onToggle")),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx"}},'<Toggle name="toggle-c" onToggle={e => console.log(e.target.checked)} />\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"The new ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"onToggle")," event, has got only one param, I mean, the standard ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"event")," object.\nIn fact, you will be able to get all information about the toggle by using ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"e.target")," as shown above."),o.a.createElement(r.MDXTag,{name:"p",components:n},"In addition, you may use the new ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"onRight")," event. It's trigged when the toggle is switched from the left to the right. In short, when it's ",o.a.createElement(r.MDXTag,{name:"strong",components:n,parentName:"p"},"on")," (usually)."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx"}},'<Toggle name="toggle-c" onRight={e => console.log(e.target.name)} />\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"Of course, there is also the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"onLeft")," event. It's trigged when the toggle is switched from the right to the left. In short, when it's ",o.a.createElement(r.MDXTag,{name:"strong",components:n,parentName:"p"},"off")," (usually)."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx"}},'<Toggle name="toggle-c" onLeft={e => console.log(e.target.name)} />\n')),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"mode-prop"}},"Mode prop"),o.a.createElement(r.MDXTag,{name:"p",components:n},"The props ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"mode")," is no longer available. This because in the previous version the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},'mode="switch"'),' was keeping the "on" and "off" appearance colours the same. Now, you can do the same by using the new props. See the  ',o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"/theming"}},"Theming")," section for more details."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"theme-prop"}},"Theme prop"),o.a.createElement(r.MDXTag,{name:"p",components:n},"We have removed the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"theme")," prop as well. Now, you'll be able to create any toggle by using the new props for the appearance and the theme provider. See the ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"/theming"}},"Theming")," section for more details."))}}])&&l(t.prototype,a),m&&l(t,m),n}()}}]);
//# sourceMappingURL=srcdocs-upgrade.f0b4fc78b603f61835ba.js.map