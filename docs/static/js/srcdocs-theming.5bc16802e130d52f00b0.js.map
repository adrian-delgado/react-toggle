{"version":3,"sources":["webpack:///./src/components/Toggle/index.tsx","webpack:///./src/theme/theme.ts","webpack:///./src/theme/index.tsx","webpack:///./srcdocs/theming.mdx"],"names":["ToggleContainer","styled","label","_templateObject","ToggleBase","span","_templateObject2","p","width","theme","defaultTheme","height","borderColor","leftBorderColor","radius","radiusBackground","borderWidth","backgroundColor","leftBackgroundColor","knobWidth","knobHeight","knobRadius","knobColor","leftKnobColor","knobGap","rightBorderColor","rightBackgroundColor","rightKnobColor","backgroundColorDisabled","Toggle","props","inputRef","useRef","className","name","_props$checked","checked","_props$controlled","controlled","_props$disabled","disabled","_props$value","value","_props$onToggle","onToggle","_props$onRight","onRight","_props$onLeft","onLeft","others","_objectWithoutProperties","cs","join","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","Object","assign","ref","onChange","e","target","type","id","defaultChecked","checkedProp","htmlFor","displayName","__docgenInfo","description","defaultValue","required","STORYBOOK_REACT_CLASSES","docgenInfo","path","__react_docgen_typescript_loader_error","__webpack_exports__","version","ReactToggleThemeProvider","_ref","children","react_default","styled_components_browser_esm","MDXContent","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","dist","index_m","__position","__code","__scope","parentName","src_theme"],"mappings":"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","file":"static/js/srcdocs-theming.3e05f461.js","sourcesContent":["import React, { FunctionComponent, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport defaultTheme from \"../../theme/theme\";\n\ninterface Props {\n  /**\n   * Addition classes\n   */\n  className?: string;\n  /**\n   * Name of checkbox. You should alway assign a name\n   *\n   * @requires true\n   */\n  name?: string;\n  /**\n   * Value used when you'll post data\n   *\n   * @default\n   */\n  value?: string;\n  /**\n   * State of checked\n   *\n   * @default false\n   */\n  checked?: boolean;\n  /**\n   * Controls whether the checked prop is controlled (passed to the `checked` prop on input) or not (passed to the `defautlChecked` prop on input)\n   *\n   * @default false\n   */\n  controlled?: boolean;\n  /**\n   * Disable the toogle\n   *\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * Trigged when the toggle change\n   *\n   * @param {React.ChangeEvent} e\n   */\n  onToggle?: (e: React.ChangeEvent) => void;\n  /**\n   * Trigged when the toggle is on the left.\n   */\n  onRight?: (e: React.ChangeEvent) => void;\n  /**\n   * Trigged when the toggle is on the right.\n   */\n  onLeft?: (e: React.ChangeEvent) => void;\n\n  // ---------------------------------------------------------------\n  // Appearance\n  // ---------------------------------------------------------------\n\n  /**\n   * Width of component\n   */\n  width?: string;\n  /**\n   * Height of component\n   */\n  height?: string;\n\n  // ---------------------------------------------------------------\n  // Border\n  // ---------------------------------------------------------------\n\n  /**\n   * Border width\n   */\n  borderWidth?: string;\n  /**\n   * Border color for both knob position. This props will override leftBorderColor and rightBorderColor props\n   */\n  borderColor?: string;\n  /**\n   * Border color when the knob is on the left (usually off)\n   */\n  leftBorderColor?: string;\n  /**\n   * Border color when the knob is on the right (usually on)\n   */\n  rightBorderColor?: string;\n\n  // ---------------------------------------------------------------\n  // Background color\n  // ---------------------------------------------------------------\n\n  /**\n   * Background color for both knob position. This props will override leftBackgroundColor and rightBackgroundColor props\n   */\n  backgroundColor?: string;\n  /**\n   * Background color when the knob is on the left (usually off)\n   */\n  leftBackgroundColor?: string;\n  /**\n   * Background color when the knob is on the right (usually on)\n   */\n  rightBackgroundColor?: string;\n\n  /**\n   * Background color when the toggle is disabled\n   */\n  backgroundColorDisabled?: string;\n\n  // ---------------------------------------------------------------\n  // Radius\n  // ---------------------------------------------------------------\n\n  /**\n   * Radius of container\n   *\n   */\n  radius?: string;\n  /**\n   * Radius of gap\n   */\n  radiusBackground?: string;\n  /**\n   * Border radius of knob\n   */\n  knobRadius?: string;\n\n  // ---------------------------------------------------------------\n  // Knob\n  // ---------------------------------------------------------------\n\n  /**\n   * Knob width\n   */\n  knobWidth?: string;\n  /**\n   * Knob height\n   */\n  knobHeight?: string;\n  /**\n   * Knob gap. It's the distance from the border/background\n   */\n  knobGap?: string;\n  /**\n   * Knob color for both knob position. This props will override the leftKnobColor and rightKnobColor\n   */\n  knobColor?: string;\n  /**\n   * Knob color when it's on the left (usually off)\n   */\n  leftKnobColor?: string;\n  /**\n   * Knob color when it's on the right (usually on)\n   */\n  rightKnobColor?: string;\n}\n\nconst ToggleContainer = styled.label``;\n\nconst ToggleBase = styled.span<Props>`\n  position: relative;\n  box-sizing: border-box;\n  display: inline-grid;\n  align-items: center;\n  width: ${p => p.width || (p.theme && p.theme.width) || defaultTheme.width};\n  height: ${p => p.height || (p.theme && p.theme.height) || defaultTheme.height};\n  vertical-align: text-top;\n  margin: 0 4px;\n\n  input[type=\"checkbox\"] {\n    position: absolute;\n    margin-left: -9999px;\n    visibility: hidden;\n\n    // off state\n    & + label {\n      display: inline-grid;\n      box-sizing: border-box;\n      align-items: center;\n      outline: none;\n      user-select: none;\n      width: ${p => p.width || (p.theme && p.theme.width) || defaultTheme.width};\n      height: ${p => p.height || (p.theme && p.theme.height) || defaultTheme.height};\n      background-color: ${p =>\n        p.borderColor || p.leftBorderColor || (p.theme && p.theme.leftBorderColor) || defaultTheme.leftBorderColor};\n      border-radius: ${p => p.radius || (p.theme && p.theme.radius) || defaultTheme.radius};\n      cursor: pointer;\n      transition: background ease-out 0.3s;\n\n      &:before {\n        content: \"\";\n        display: block;\n        position: absolute;\n        border-radius: ${p =>\n          p.radiusBackground || (p.theme && p.theme.radiusBackground) || defaultTheme.radiusBackground};\n        width: calc(\n          ${p => p.width || (p.theme && p.theme.width) || defaultTheme.width} - 2 *\n            ${p => p.borderWidth || (p.theme && p.theme.borderWidth) || defaultTheme.borderWidth}\n        );\n        height: calc(\n          ${p => p.height || (p.theme && p.theme.height) || defaultTheme.height} - 2 *\n            ${p => p.borderWidth || (p.theme && p.theme.borderWidth) || defaultTheme.borderWidth}\n        );\n        background-color: ${p =>\n          p.backgroundColor ||\n          p.leftBackgroundColor ||\n          (p.theme && p.theme.leftBackgroundColor) ||\n          defaultTheme.leftBackgroundColor};\n        left: ${p => p.borderWidth || (p.theme && p.theme.borderWidth) || defaultTheme.borderWidth};\n      }\n\n      &:after {\n        display: block;\n        position: absolute;\n        content: \"\";\n        width: ${p => p.knobWidth || (p.theme && p.theme.knobWidth) || defaultTheme.knobWidth};\n        height: ${p => p.knobHeight || (p.theme && p.theme.knobHeight) || defaultTheme.knobHeight};\n        border-radius: ${p => p.knobRadius || (p.theme && p.theme.knobRadius) || defaultTheme.knobRadius};\n        background-color: ${p =>\n          p.knobColor || p.leftKnobColor || (p.theme && p.theme.leftKnobColor) || defaultTheme.leftKnobColor};\n        transition: all ease-out 0.4s;\n        margin-left: ${p => p.knobGap || (p.theme && p.theme.knobGap) || defaultTheme.knobGap};\n      }\n    }\n\n    // on state\n    &:checked {\n      & + label {\n        background-color: ${p =>\n          p.borderColor ||\n          p.rightBorderColor ||\n          (p.theme && p.theme.rightBorderColor) ||\n          defaultTheme.rightBorderColor};\n\n        &:before {\n          background-color: ${p =>\n            p.backgroundColor ||\n            p.rightBackgroundColor ||\n            (p.theme && p.theme.rightBackgroundColor) ||\n            defaultTheme.rightBackgroundColor};\n        }\n\n        &:after {\n          margin-left: calc(\n            100% - ${p => p.knobWidth || (p.theme && p.theme.knobWidth) || defaultTheme.knobWidth} -\n              ${p => p.knobGap || (p.theme && p.theme.knobGap) || defaultTheme.knobGap}\n          );\n          transition: all ease-out 0.2s;\n          background-color: ${p =>\n            p.knobColor || p.rightKnobColor || (p.theme && p.theme.rightKnobColor) || defaultTheme.rightKnobColor};\n        }\n      }\n\n      &:disabled {\n        & + label {\n          background-color: ${p =>\n            p.backgroundColorDisabled ||\n            (p.theme && p.theme.backgroundColorDisabled) ||\n            defaultTheme.backgroundColorDisabled};\n          &:after {\n            box-shadow: none;\n          }\n        }\n      }\n    }\n\n    // disabled\n    &:disabled {\n      & + label {\n        background-color: ${p =>\n          p.backgroundColorDisabled ||\n          (p.theme && p.theme.backgroundColorDisabled) ||\n          defaultTheme.backgroundColorDisabled};\n        cursor: default;\n        &:after {\n          box-shadow: none;\n          background-color: ${p =>\n            p.backgroundColorDisabled ||\n            (p.theme && p.theme.backgroundColorDisabled) ||\n            defaultTheme.backgroundColorDisabled};\n        }\n      }\n    }\n  }\n`;\n\nconst Toggle: FunctionComponent<Props> = props => {\n  const inputRef = useRef(null);\n\n  const {\n    className,\n    name,\n    checked = false,\n    controlled = false,\n    disabled = false,\n    value = \"\",\n    onToggle = () => true,\n    onRight = () => true,\n    onLeft = () => true,\n    ...others\n  } = props;\n\n  const cs = [\"react-toggle\", className || \"\"].join(\" \");\n\n  const onChangeHandler = (e: React.ChangeEvent) => {\n    if (!!onToggle) {\n      // const i: any = inputRef.current;\n      // console.log(\"onToggle\", i.checked);\n      onToggle(e);\n\n      const target = e.target as HTMLInputElement;\n\n      if (target && target.checked) {\n        onRight(e);\n      } else {\n        onLeft(e);\n      }\n    }\n  };\n\n  const checkedProp = (controlled: boolean) => {\n    return controlled ? { checked } : { defaultChecked: checked };\n  };\n\n  return (\n    <ToggleBase className={cs} {...others}>\n      <input\n        ref={inputRef}\n        onChange={onChangeHandler}\n        type={\"checkbox\"}\n        id={name}\n        name={name}\n        value={value}\n        disabled={disabled}\n        {...checkedProp(controlled)}\n      />\n      <ToggleContainer htmlFor={name} />\n    </ToggleBase>\n  );\n};\n\nexport default Toggle;\ntry {\n    // @ts-ignore\n    Toggle.displayName = \"Toggle\";\n    // @ts-ignore\n    Toggle.__docgenInfo = { \"description\": \"\", \"displayName\": \"Toggle\", \"props\": { \"className\": { \"defaultValue\": null, \"description\": \"Addition classes\", \"name\": \"className\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"name\": { \"defaultValue\": null, \"description\": \"Name of checkbox. You should alway assign a name\\n@requires true\", \"name\": \"name\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"value\": { \"defaultValue\": null, \"description\": \"Value used when you'll post data\", \"name\": \"value\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"checked\": { \"defaultValue\": { value: \"false\" }, \"description\": \"State of checked\", \"name\": \"checked\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"controlled\": { \"defaultValue\": { value: \"false\" }, \"description\": \"Controls whether the checked prop is controlled (passed to the `checked` prop on input) or not (passed to the `defautlChecked` prop on input)\", \"name\": \"controlled\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"disabled\": { \"defaultValue\": { value: \"false\" }, \"description\": \"Disable the toogle\", \"name\": \"disabled\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"onToggle\": { \"defaultValue\": null, \"description\": \"Trigged when the toggle change\\n@param e\", \"name\": \"onToggle\", \"required\": false, \"type\": { \"name\": \"(e: any) => void\" } }, \"onRight\": { \"defaultValue\": null, \"description\": \"Trigged when the toggle is on the left.\", \"name\": \"onRight\", \"required\": false, \"type\": { \"name\": \"(e: any) => void\" } }, \"onLeft\": { \"defaultValue\": null, \"description\": \"Trigged when the toggle is on the right.\", \"name\": \"onLeft\", \"required\": false, \"type\": { \"name\": \"(e: any) => void\" } }, \"width\": { \"defaultValue\": null, \"description\": \"Width of component\", \"name\": \"width\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"height\": { \"defaultValue\": null, \"description\": \"Height of component\", \"name\": \"height\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"borderWidth\": { \"defaultValue\": null, \"description\": \"Border width\", \"name\": \"borderWidth\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"borderColor\": { \"defaultValue\": null, \"description\": \"Border color for both knob position. This props will override leftBorderColor and rightBorderColor props\", \"name\": \"borderColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"leftBorderColor\": { \"defaultValue\": null, \"description\": \"Border color when the knob is on the left (usually off)\", \"name\": \"leftBorderColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"rightBorderColor\": { \"defaultValue\": null, \"description\": \"Border color when the knob is on the right (usually on)\", \"name\": \"rightBorderColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"backgroundColor\": { \"defaultValue\": null, \"description\": \"Background color for both knob position. This props will override leftBackgroundColor and rightBackgroundColor props\", \"name\": \"backgroundColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"leftBackgroundColor\": { \"defaultValue\": null, \"description\": \"Background color when the knob is on the left (usually off)\", \"name\": \"leftBackgroundColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"rightBackgroundColor\": { \"defaultValue\": null, \"description\": \"Background color when the knob is on the right (usually on)\", \"name\": \"rightBackgroundColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"backgroundColorDisabled\": { \"defaultValue\": null, \"description\": \"Background color when the toggle is disabled\", \"name\": \"backgroundColorDisabled\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"radius\": { \"defaultValue\": null, \"description\": \"Radius of container\", \"name\": \"radius\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"radiusBackground\": { \"defaultValue\": null, \"description\": \"Radius of gap\", \"name\": \"radiusBackground\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"knobRadius\": { \"defaultValue\": null, \"description\": \"Border radius of knob\", \"name\": \"knobRadius\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"knobWidth\": { \"defaultValue\": null, \"description\": \"Knob width\", \"name\": \"knobWidth\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"knobHeight\": { \"defaultValue\": null, \"description\": \"Knob height\", \"name\": \"knobHeight\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"knobGap\": { \"defaultValue\": null, \"description\": \"Knob gap. It's the distance from the border/background\", \"name\": \"knobGap\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"knobColor\": { \"defaultValue\": null, \"description\": \"Knob color for both knob position. This props will override the leftKnobColor and rightKnobColor\", \"name\": \"knobColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"leftKnobColor\": { \"defaultValue\": null, \"description\": \"Knob color when it's on the left (usually off)\", \"name\": \"leftKnobColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"rightKnobColor\": { \"defaultValue\": null, \"description\": \"Knob color when it's on the right (usually on)\", \"name\": \"rightKnobColor\", \"required\": false, \"type\": { \"name\": \"string\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Toggle/index.tsx#Toggle\"] = { docgenInfo: Toggle.__docgenInfo, name: \"Toggle\", path: \"src/components/Toggle/index.tsx#Toggle\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","/**\n * Default theme settings.\n *\n */\n\n//\n// Export theme\n//\nexport default {\n  version: \"1.0.0\",\n  width: \"48px\",\n  height: \"24px\",\n\n  borderWidth: \"2px\",\n  borderColor: \"#aaa\",\n  leftBorderColor: \"#aaa\",\n  rightBorderColor: \"#3887b7\",\n\n  leftBackgroundColor : \"#fff\",\n  rightBackgroundColor : \"#fff\",\n  backgroundColorDisabled : \"#eee\",\n\n  radius : \"256px\",\n  radiusBackground : \"256px\",\n  knobRadius : \"100%\",\n\n  knobWidth : \"16px\",\n  knobHeight : \"16px\",\n  knobGap: \"4px\",\n\n  knobColor: \"#aaa\",\n  leftKnobColor: \"#aaa\",\n  rightKnobColor: \"#3887b7\",\n};try {\n    // @ts-ignore\n    theme.displayName = \"theme\";\n    // @ts-ignore\n    theme.__docgenInfo = { \"description\": \"Default theme settings.\", \"displayName\": \"theme\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/theme/theme.ts#theme\"] = { docgenInfo: theme.__docgenInfo, name: \"theme\", path: \"src/theme/theme.ts#theme\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","/**\n * Default theme provider.\n *\n */\nimport React, {FunctionComponent} from 'react';\nimport {ThemeProvider} from \"styled-components\";\nimport defaultTheme from \"./theme\";\n\n\ninterface Props {\n  theme?:any;\n  children?: React.ReactChild;\n}\n\nconst ReactToggleThemeProvider: FunctionComponent<Props> = ({children,theme}) => <ThemeProvider theme={theme || defaultTheme}>\n  {children}\n</ThemeProvider>;\n\nexport default ReactToggleThemeProvider;try {\n    // @ts-ignore\n    theme.displayName = \"theme\";\n    // @ts-ignore\n    theme.__docgenInfo = { \"description\": \"\", \"displayName\": \"theme\", \"props\": { \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"any\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/theme/index.tsx#theme\"] = { docgenInfo: theme.__docgenInfo, name: \"theme\", path: \"src/theme/index.tsx#theme\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, Props } from 'docz'\nimport Toggle from '../src/components/Toggle'\nimport ReactToggleThemeProvider from '../src/theme/'\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"theming\"}}>{`Theming`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This new version allow to change the whole toggle appearance. Now you'll be able to change every single color and size, for each single toggle component of for the whole user interface.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"how-change-the-toggle-appearance\"}}>{`How change the toggle appearance`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You may change the toggle appearance in two way: by using the new props for each single instance of your toggle component, or by using a theme provider.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"new-appearance-props\"}}>{`New appearance props`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You may use the new props to change the appearance for a single instance of component`}</MDXTag>\n<Playground __position={0} __code={'<p>Change the background</p>\\n<Toggle name=\\\"t-1\\\" backgroundColor=\\\"rgba(0,0,0,1)\\\" />\\n<p>Change the background when on</p>\\n<Toggle name=\\\"t-2\\\" rightBackgroundColor=\\\"tomato\\\" />'} __scope={{props: this ? this.props : props,Toggle,ReactToggleThemeProvider}}>\n  <p>Change the background</p>\n  <Toggle name=\"t-1\" backgroundColor=\"rgba(0,0,0,1)\"/>\n  <p>Change the background when on</p>\n  <Toggle name=\"t-2\" rightBackgroundColor=\"tomato\"/>\n</Playground>\n<MDXTag name=\"p\" components={components}>{`Now you can also change others appearance properties`}</MDXTag>\n<Playground __position={1} __code={'<p>Change the shape</p>\\n<Toggle name=\\\"t-3\\\" radius=\\\"3px\\\" radiusBackground=\\\"2px\\\" knobRadius=\\\"2px\\\" />\\n<p>Change the width size</p>\\n<Toggle name=\\\"t-4\\\" width=\\\"128px\\\" />\\n<p>Change the height size</p>\\n<Toggle name=\\\"t-4h\\\" height=\\\"48px\\\" />\\n<p>Change the knob size</p>\\n<Toggle name=\\\"t-5\\\" knobWidth=\\\"8px\\\" knobHeight=\\\"8px\\\" />\\n<Toggle\\n  name=\\\"t-6\\\"\\n  radius=\\\"3px\\\"\\n  radiusBackground=\\\"2px\\\"\\n  knobRadius=\\\"2px\\\"\\n  width=\\\"128px\\\"\\n  knobWidth=\\\"50px\\\"\\n/>'} __scope={{props: this ? this.props : props,Toggle,ReactToggleThemeProvider}}>\n  <p>Change the shape</p>\n  <Toggle name=\"t-3\" radius=\"3px\" radiusBackground=\"2px\" knobRadius=\"2px\"/>\n  <p>Change the width size</p>\n  <Toggle name=\"t-4\" width=\"128px\"/>\n  <p>Change the height size</p>\n  <Toggle name=\"t-4h\" height=\"48px\"/>\n  <p>Change the knob size</p>\n  <Toggle name=\"t-5\" knobWidth=\"8px\" knobHeight=\"8px\"/>\n  <Toggle name=\"t-6\" radius=\"3px\" radiusBackground=\"2px\" knobRadius=\"2px\" width=\"128px\" knobWidth=\"50px\"/>\n</Playground>\n<MDXTag name=\"p\" components={components}>{`You can also change the size and the border`}</MDXTag>\n<Playground __position={2} __code={'<p>Change the border size</p>\\n<Toggle name=\\\"t-7\\\" borderWidth=\\\"1px\\\" />\\n<Toggle name=\\\"t-8\\\" borderWidth=\\\"3px\\\" />\\n<Toggle name=\\\"t-9\\\" borderWidth=\\\"5px\\\" />\\n<Toggle name=\\\"t-10\\\" borderWidth=\\\"5px\\\" knobWidth=\\\"8px\\\" knobHeight=\\\"8px\\\" />'} __scope={{props: this ? this.props : props,Toggle,ReactToggleThemeProvider}}>\n  <p>Change the border size</p>\n  <Toggle name=\"t-7\" borderWidth=\"1px\"/>\n  <Toggle name=\"t-8\" borderWidth=\"3px\"/>\n  <Toggle name=\"t-9\" borderWidth=\"5px\"/>\n  <Toggle name=\"t-10\" borderWidth=\"5px\" knobWidth=\"8px\" knobHeight=\"8px\"/>\n</Playground>\n<MDXTag name=\"p\" components={components}>{`Of course, you can set the knob gap`}</MDXTag>\n<Playground __position={3} __code={'<p>Change the border size</p>\\n<Toggle name=\\\"t-11\\\" borderWidth=\\\"1px\\\" knobGap=\\\"8px\\\" />\\n<Toggle name=\\\"t-12\\\" borderWidth=\\\"3px\\\" knobGap=\\\"8px\\\" />\\n<Toggle name=\\\"t-13\\\" borderWidth=\\\"5px\\\" knobGap=\\\"8px\\\" />\\n<Toggle\\n  name=\\\"t-14\\\"\\n  borderWidth=\\\"5px\\\"\\n  knobWidth=\\\"8px\\\"\\n  knobHeight=\\\"8px\\\"\\n  knobGap=\\\"8px\\\"\\n/>'} __scope={{props: this ? this.props : props,Toggle,ReactToggleThemeProvider}}>\n  <p>Change the border size</p>\n  <Toggle name=\"t-11\" borderWidth=\"1px\" knobGap=\"8px\"/>\n  <Toggle name=\"t-12\" borderWidth=\"3px\" knobGap=\"8px\"/>\n  <Toggle name=\"t-13\" borderWidth=\"5px\" knobGap=\"8px\"/>\n  <Toggle name=\"t-14\" borderWidth=\"5px\" knobWidth=\"8px\" knobHeight=\"8px\" knobGap=\"8px\"/>\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"theme-provider\"}}>{`Theme Provider`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Instead of change every single props, you might use the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ReactToggleThemeProvider`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`import {ReactToggleThemeProvider} from \"react-toggle-component\";\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The current default theme is the following`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`export default {\n  version: \"1.0.0\",\n  width: \"48px\",\n  height: \"24px\",\n\n  borderWidth: \"2px\",\n  borderColor: \"#aaa\",\n  leftBorderColor: \"#aaa\",\n  rightBorderColor: \"#3887b7\",\n\n  leftBackgroundColor : \"#fff\",\n  rightBackgroundColor : \"#fff\",\n  backgroundColorDisabled : \"#eee\",\n\n  radius : \"256px\",\n  radiusBackground : \"256px\",\n  knobRadius : \"100%\",\n\n  knobWidth : \"16px\",\n  knobHeight : \"16px\",\n  knobGap: \"4px\",\n\n  knobColor: \"#aaa\",\n  leftKnobColor: \"#aaa\",\n  rightKnobColor: \"#3887b7\",\n};\n`}</MDXTag></MDXTag>\n<Playground __position={4} __code={'<ReactToggleThemeProvider theme={{ leftBackgroundColor: \\'tomato\\' }}>\\n  <div>\\n    <p>All toggle children will use the same theme</p>\\n    <Toggle name=\\\"t-p1\\\" />\\n    <Toggle name=\\\"t-p2\\\" />\\n    <Toggle name=\\\"t-p3\\\" />\\n    <Toggle name=\\\"t-p4\\\" />\\n  </div>\\n</ReactToggleThemeProvider>'} __scope={{props: this ? this.props : props,Toggle,ReactToggleThemeProvider}}>\n  <ReactToggleThemeProvider theme={{ leftBackgroundColor:\"tomato\"}}>\n    <div>\n      <p>All toggle children will use the same theme</p>\n      <Toggle name=\"t-p1\" />\n      <Toggle name=\"t-p2\" />\n      <Toggle name=\"t-p3\" />\n      <Toggle name=\"t-p4\" />\n    </div>\n  </ReactToggleThemeProvider>\n</Playground>\n<MDXTag name=\"p\" components={components}>{`As you can see from the above example, you don't need to write your own custome theme with all properties, you may override one or more properties.`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}