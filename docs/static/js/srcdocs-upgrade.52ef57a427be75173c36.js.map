{"version":3,"sources":["/Users/giovambattistafazioli/Lavori/Github/react-toggle/srcdocs/upgrade.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_giovambattistafazioli_Lavori_Github_react_toggle_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","href","isMDXComponent"],"mappings":"yWAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,iBADR,iBAGAL,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,yBADR,2BAGAL,OAAAE,EAAA,EAAAF,CAAA,wHACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,UADR,UAGAL,OAAAE,EAAA,EAAAF,CAAA,yGACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,iBADZ,6QAiBLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,UADR,UAGAL,OAAAE,EAAA,EAAAF,CAAA,yBAAoBA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,YAApB,iBAA0FN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,aAC1FN,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,iBADZ,wMAQLP,OAAAE,EAAA,EAAAF,CAAA,oBAAeA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,YAAf,wDAA4HN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,SAA5H,wFACyEN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,YADzE,oBAEAN,OAAAE,EAAA,EAAAF,CAAA,6CAAwCA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,WAAxC,QAAoGN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,UAApG,wHAA+QN,OAAAE,EAAA,EAAAF,CAAA,UAAQM,WAAW,KAAnB,MAA/Q,kBAAwUN,OAAAE,EAAA,EAAAF,CAAA,UAAQM,WAAW,KAAnB,OAAxU,eACAN,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,iBADZ,mNAQLP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,aADR,aAGAL,OAAAE,EAAA,EAAAF,CAAA,0BAAqBA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,QAArB,qEAA2IN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,iBAA3I,0HAA+TN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,KAAQ,CACjVE,KAAQ,aADmT,WAA/T,8BAGAR,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,cADR,cAGAL,OAAAE,EAAA,EAAAF,CAAA,qCAAgCA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,SAAhC,mIAAqNN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,KAAQ,CACvOE,KAAQ,aADyM,WAArN,wMAMJZ,EAAWa,gBAAiB","file":"static/js/srcdocs-upgrade.6722ca7c.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"upgrade-guide\"\n    }}>{`Upgrade Guide`}</h1>\n    <h2 {...{\n      \"id\": \"upgrade-to-20-from-1x\"\n    }}>{`Upgrade to 2.0 from 1.x`}</h2>\n    <p>{`This version is not fully compatible with the previous 1.x versions. Anyway, you may update your code easly`}</p>\n    <h2 {...{\n      \"id\": \"labels\"\n    }}>{`Labels`}</h2>\n    <p>{`First of all, we've removed the props for the labels. You can upgrade your code by following`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// previous v1.x\n<Toggle label=\"Left label\" />\n\n// Left label from v2.x\n<label htmlFor=\"toggle-a\">\n  Click me\n  <Toggle name=\"toggle-a\" />\n</label>\n\n// Right label from v2.x\n<label htmlFor=\"toggle-b\">\n  <Toggle name=\"toggle-b\" />\n  Click me\n</label>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"events\"\n    }}>{`Events`}</h2>\n    <p>{`The previous `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` event become `}<inlineCode parentName=\"p\">{`onToggle`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// previous v1.x\n<Toggle name=\"toggle-c\" onChange={(checked, evt) => console.log(e.target.checked)} />\n\n// from v2.x\n<Toggle name=\"toggle-c\" onToggle={e => console.log(e.target.checked)} />\n`}</code></pre>\n    <p>{`The new `}<inlineCode parentName=\"p\">{`onToggle`}</inlineCode>{` event, has got only one param, I mean, the standard `}<inlineCode parentName=\"p\">{`event`}</inlineCode>{` object.\nIn fact, you will be able to get all information about the toggle by using `}<inlineCode parentName=\"p\">{`e.target`}</inlineCode>{` as shown above.`}</p>\n    <p>{`In addition, you may use the new `}<inlineCode parentName=\"p\">{`onRight`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`onLeft`}</inlineCode>{` events. They are trigged when the toggle is switched from the left to the right and vice versa. In short, when it's `}<strong parentName=\"p\">{`on`}</strong>{` (usually) and `}<strong parentName=\"p\">{`off`}</strong>{` (usually).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// from left to the right \"on\"\n<Toggle name=\"toggle-c\" onRight={e => console.log(e.target.name)} />\n\n// from right to the left \"off\"\n<Toggle name=\"toggle-c\" onLeft={e => console.log(e.target.name)} />\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mode-prop\"\n    }}>{`Mode prop`}</h2>\n    <p>{`Also the prop `}<inlineCode parentName=\"p\">{`mode`}</inlineCode>{` is no longer available. This because in the previous version the `}<inlineCode parentName=\"p\">{`mode=\"switch\"`}</inlineCode>{` was keeping the \"on\" and \"off\" appearance colours the same. Now, you can do the same by using the new props. See the  `}<a parentName=\"p\" {...{\n        \"href\": \"/theming\"\n      }}>{`Theming`}</a>{` section for more details.`}</p>\n    <h2 {...{\n      \"id\": \"theme-prop\"\n    }}>{`Theme prop`}</h2>\n    <p>{`We have also removed the `}<inlineCode parentName=\"p\">{`theme`}</inlineCode>{` prop. Now, you'll be able to create any toggle theme by using the new props for the appearance and the theme provider. See the `}<a parentName=\"p\" {...{\n        \"href\": \"/theming\"\n      }}>{`Theming`}</a>{` section for more details.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}